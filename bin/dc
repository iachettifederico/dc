#!/usr/bin/env ruby
require "dotenv"
require "etc"
require "trollop"

App = Struct.new(:name) do
  def initialize(name: , env: ENV, dry: false)
    self.name = name.to_s.downcase
  end

  def to_s
    name
  end

  def ==(other)
    name == other.name
  end

  def path
    path = "DC_#{name.upcase}_PATH"
    ENV[path].gsub(/\A~/, HOME)
  end

  def url
    url = "DC_#{name.upcase}_URL"
    ENV[url].gsub(/\A~/, HOME)
  end

  def port
    url[/:(\d+)/, 1]
  end

  def start
    Dir.chdir(path) do
      `#{start_command}`
    end
  end

  def kill
    Dir.chdir(path) do
      `#{kill_command}`
    end
  end

  def pid_file
    "#{path}/tmp/pids/server.pid"
  end

  def pid
    if File.exist?(pid_file)
      File.new(pid_file).read
    end
  end

  def start_command
    [
      "rails server",
      "--port=#{port}",
      "-d",
    ].join(" ")
  end

  def kill_command
    [
      "kill -9",
      pid,
    ].join(" ")
  end

  # DB
  def db_drop_command
    [
      "rake db:drop",
      "&&",
      "rake db:drop RAILS_ENV=test",
    ].join(" ")
  end

  def db_drop
    Dir.chdir(path) do
      `#{db_drop_command}`
    end
  end

  def db_create_command
    [
      "rake db:create",
      "&&",
      "rake db:create RAILS_ENV=test",
    ].join(" ")
  end

  def db_create
    Dir.chdir(path) do
      `#{db_create_command}`
    end
  end

  def db_migrate_command
    [
      "rake db:migrate",
      "&&",
      "rake db:migrate RAILS_ENV=test",
    ].join(" ")
  end

  def db_migrate
    Dir.chdir(path) do
      `#{db_migrate_command}`
    end
  end

  def db_seed_command
    [
      "rake db:seed",
      "&&",
      "rake db:seed RAILS_ENV=test",
    ].join(" ")
  end

  def db_seed
    Dir.chdir(path) do
      `#{db_seed_command}`
    end
  end

  def bundle_command
    [
      "bundle install",
      "pessimize -c patch",
      "rm Gemfile.backup",
      "rm Gemfile.lock.backup"
    ].join(" &&  ")
  end

  def bundle
    Dir.chdir(path) do
      `#{bundle_command}`
    end
  end

  # RUN
  def run(command)
    Dir.chdir(path) do
      puts "-" * 50
      IO.popen(command) do |out|
        out.each_line do |line|
          puts line
        end
      end
      puts "-" * 50
    end
  end

end

curr_dir = Dir.pwd
Dotenv.load

user = Etc.getlogin
HOME = Dir.home(user)

def keys
  urls = ENV.keys.select { |key|
    key.start_with?("DC_") && key.end_with?("_URL")
  }
  urls.map! { |key|
    key[/DC_(.+)_URL/, 1].downcase
  }

  paths = ENV.keys.select { |key|
    key.start_with?("DC_") && key.end_with?("_PATH")
  }
  paths.map! { |key|
    key[/DC_(.+)_PATH/, 1].downcase
  }

  a, b = urls, paths
  (a+b).uniq - ((a-b) + (b-a))
end


require 'trollop'
OPTIONS = Trollop::options do
  # General actions
  opt :start,   "Start apps", short: :s
  opt :kill,    "Kill apps", short: :k
  opt :restart, "Kill and Restart apps", short: :r

  # Information
  opt :paths, "Print paths", short: :p
  opt :urls,  "Print urls", short: :u
  opt :dry,   "Dry Run"

  # # Database
  opt :dbrecreate, "Recreate Database", short: :m

  opt :dbdrop,     "Drop Database"
  opt :dbcreate,   "Recreate Database"
  # opt :dbmigrate,  "Migrate Database"
  # opt :dbseed,     "Seed Database"

  opt :bundle, "bundle install and pessimize", short: :b

  opt :command, "Run a specific command in all apps", short: :c, type: String
end

def db_app
  @db_app ||= App.new(name: ENV["DC_DB_APP"])
end

def apps
  @app_names = ARGV.any? ? ARGV : keys
  @app_names.map!(&:downcase)

  if @app_names.all? { |name| keys.include?(name) }
    @app_names.map { |name| App.new(name: name) }
  else
    @app_names.each do |name|
      unless keys.include?(name)
        puts "Invalid App name: #{name}"
      end
    end
    exit(1)
  end
end


max_name_length = apps.max { |a, b| a.name.size <=> b.name.size }.name.size

if OPTIONS[:kill] || OPTIONS[:restart] || OPTIONS[:start] || OPTIONS[:urls] || OPTIONS[:paths] || OPTIONS[:bundle] || OPTIONS[:command]
  apps.each do |app|
    if OPTIONS[:kill]
      puts "Stopping #{app}"
    end

    if OPTIONS[:kill] || OPTIONS[:restart] || OPTIONS[:bundle] || OPTIONS[:command]
      app.kill
    end

    if OPTIONS[:bundle]
      puts "Running bundle on %s" % [app, app.url]
      app.bundle
      puts "%s bundled" % [app, app.url]
    end

    if OPTIONS[:command]
      puts "%s Running: %s" % [app, OPTIONS[:command]]
      app.run(OPTIONS[:command])
    end

    if OPTIONS[:start] || OPTIONS[:restart] || OPTIONS[:command]
      app.start
    end

    if OPTIONS[:urls] || OPTIONS[:start] || OPTIONS[:restart] || OPTIONS[:bundle]
      puts "%#{max_name_length}s: %s" % [app, app.url]
    end

    if OPTIONS[:paths]
      puts "%#{max_name_length}s: %s" % [app, app.path]
    end
  end
elsif OPTIONS[:dbrecreate]
  apps.each do |app|
    puts "Stopping #{app}"
    app.kill
  end

  puts "Recreating database"
  db_app.db_drop
  db_app.db_create
  db_app.db_migrate
  db_app.db_seed
  puts "Database recreated"

  apps.each do |app|
    puts "Starting #{app}"
    app.start
  end
end
